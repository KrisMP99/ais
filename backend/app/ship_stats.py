import os
import logging
from dotenv import load_dotenv
import pandas as pd
import pandas.io.sql as psql
from sqlalchemy import create_engine
import matplotlib.pyplot as plt

COLUMNS_ALL = ['timestamp', 'mobile_type', 'mmsi', 'latitude', 'longitude', 'navigational_status', 'rot', 'sog', 'cog', 'heading', 'imo', 'callsign', 'name', 'ship_type', 'cargo_type', 'width', 'length', 'type_of_position_fixing_device', 'draught', 'destination', 'eta', 'data_source_type']

COLUMNS_CURR=['sog']

load_dotenv()
USER = os.getenv('POSTGRES_USER')
PASS = os.getenv('POSTGRES_PASSWORD')
HOST_DB = os.getenv('HOST_DB')
DB_NAME = os.getenv('DB_NAME')
ERROR_LOG_FILE_PATH = "C:\\Users\\Kristian\\Desktop\\ship_stats.log"

db_string = f"postgresql://{USER}:{PASS}@{HOST_DB}/{DB_NAME}"
engine = create_engine(db_string)

# Logging for file
def get_logger():
    Log_Format = "[%(levelname)s] -  %(asctime)s - %(message)s"
    logging.basicConfig(format = Log_Format,
                        force = True,
                        handlers = [
                            logging.FileHandler(ERROR_LOG_FILE_PATH),
                            logging.StreamHandler()
                        ],
                        level = logging.INFO)

    logger = logging.getLogger()
    return logger

mmsi_arr = [205689000,209014000,209098000,209151000,209184000,209297000,209313000,209336000,209452000,209488000,209525000,209535000,209547000,209659000,209671000,209696000,209717000,209726000,209940000,209956000,209968000,209982000,210041000,210075000,210173000,210178000,210223000,210434000,210780000,211100000,211223310,211230400,211234480,211254620,211265530,211284350,211317180,211341960,211376860,211552710,211553000,211718360,211815120,212008000,212075000,212172000,212204000,212385000,212530000,212558000,212597000,212613000,212702000,212733000,212746000,212821000,212900000,212906000,214182780,215349000,215383000,215908000,215945000,218005000,218042000,218098000,218179000,218492000,218797000,218800000,218801000,218802000,218805000,218816000,218849000,218856000,218858000,219000622,219007477,219007898,219012076,219015382,219018271,219018865,219019094,219023116,219024883,219025426,219026490,219027310,219027992,219027995,219028042,219053000,219164000,219170000,219234000,219329000,219358000,219361000,219370000,219435000,219437000,219449000,219455000,219459000,219460000,219464000,219491000,219578000,219596000,219609000,219612000,219616000,219741000,219812000,220010000,220223000,220253000,220464000,220474000,220490000,220550000,220600000,229376000,229536000,229805000,229860000,230011000,230042000,230138350,230350000,230351000,230618000,230632000,230642000,230648000,230649000,230651000,230662000,230666000,230670000,230691000,230985000,231025000,231026000,231201000,231251000,231356000,231613000,231790000,231800000,231807000,231815000,231836000,231840000,231841000,231842000,231855000,232005533,232031869,235012220,235050837,235059487,235060914,235060989,235081933,235094625,235103287,235106484,235507000,236265000,236330000,236509000,236622000,236644000,236710000,241150000,241317000,244003000,244010873,244054000,244058000,244109000,244110544,244130689,244140388,244218000,244246000,244519000,244557000,244590000,244613000,244615929,244642000,244645000,244674000,244683000,244700336,244750397,244780569,244807000,244831000,244850854,244850970,244860278,244870673,244886000,244890901,244901000,244976000,245046000,245058000,245147000,245157000,245176000,245186000,245257000,245281000,245399000,245568000,245570000,245656000,245772000,245872000,245897000,245901000,245943000,245959000,246029000,246168000,246179000,246188000,246191000,246279000,246399000,246441000,246449000,246466000,246522000,246542000,246546000,246554000,246596000,246606000,246650000,246655000,246667000,246668000,246669000,246670000,246767000,246771000,246845000,246852000,246855000,246993000,248185000,248562000,248655000,248659000,248738000,248923000,248971000,249393000,249399000,249885000,249934000,250002686,250005932,250006456,251848270,253738000,253817000,255724000,255801570,255802270,255805620,255805788,255805809,255805838,255805880,255805881,255805883,255805903,255805916,255805917,255805929,255805937,255805988,255806081,255806119,255806139,255806177,255806191,255806216,255806232,255806257,255806258,255806275,255806289,255806342,255806353,255806399,255806436,255806439,255806444,255806478,255806484,255806508,255806511,255806522,255806525,256041000,256149000,257025000,257061000,257068010,257076220,257077550,257080050,257114000,257141000,257207000,257340000,257520000,257653000,257698000,257708000,257723000,257740000,257798800,258009780,258062000,258119000,258129000,258422000,258709000,258725000,258763000,258809000,258812000,258829000,259013000,259468000,259837000,261002090,261006820,265413000,265472000,265509140,265511830,266416000,266439000,271042566,273116000,273210440,273210550,273215370,273219190,273219340,273299650,273311900,273315800,273316200,273350280,273358960,273416650,273417780,275504000,275509000,275511000,275519000,275524000,276855000,277573000,304010366,304030000,304052000,304196000,304214000,304339000,304470000,304520000,304533000,304667000,304717000,304829000,304832000,304846000,304853000,304858000,304944000,304946000,304953000,304962000,304997000,305198000,305286000,305287000,305288000,305313000,305366000,305426000,305468000,305476000,305486000,305493000,305502000,305512000,305533000,305610000,305639000,305661000,305662000,305693000,305741000,305773000,305808000,305824000,305869000,305882000,305922000,305933000,305967000,305979000,305981000,308192000,308599000,309186000,310398000,311005800,311055400,311453000,311595000,311818000,311973000,311995000,314217000,314222000,314318000,314419000,314471000,314472000,314475000,314551000,314583000,319122500,341864000,352986176,353105000,353571000,354537000,354540000,354552000,354749000,354974000,355173000,355194000,355390000,356624000,356712000,357210000,357446000,357463000,357847000,357984000,367581060,368359000,370160000,371313000,371519000,372176000,375103000,376184000,376532000,377085000,377255000,377455000,377661000,413054000,477231100,477274400,477302900,477321000,477444500,477520900,477524400,477699800,477967800,538003541,538003746,538003798,538004646,538005452,538005652,538006800,538007269,538007274,538007571]
avg_speed_arr = []
max_speed_arr = []

logger = get_logger()

for mmsi in mmsi_arr:
    sql_query = f"SELECT sog "\
                f"FROM raw_data "\
                f"WHERE mmsi={mmsi} AND "\
                 "sog IS NOT NULL"

    sql = psql.read_sql_query(sql=sql_query, con=engine)
    df = pd.DataFrame(sql, columns=COLUMNS_CURR)

    num_of_rows = df.sog.count()

    if(num_of_rows <= 0):
        print(f"{mmsi} rows: {num_of_rows}")
        print(sql_query)
        continue
    else:
        print(f"{mmsi} rows: {num_of_rows}")

    max_speed = df.sog.max()
    avg_speed = df.sog.sum() / num_of_rows

    max_speed_arr.append(max_speed)
    avg_speed_arr.append(avg_speed)

    logger.info(f"MMSI: {mmsi}\tMAX_SPEED: {max_speed}\tAVG_SPEED: {avg_speed}")

total_max_speed = max(max_speed_arr)
total_average = sum(avg_speed_arr) / len(avg_speed_arr)

data = [avg_speed_arr, max_speed_arr]

bp = plt.boxplot(data)
plt.show()

medians = [round(item.get_ydata()[0], 1) for item in bp['medians']]
means = [round(item.get_ydata()[0], 1) for item in bp['means']]
minimums = [round(item.get_ydata()[0], 1) for item in bp['caps']][::2]
maximums = [round(item.get_ydata()[0], 1) for item in bp['caps']][1::2]
q1 = [round(min(item.get_ydata()), 1) for item in bp['boxes']]
q3 = [round(max(item.get_ydata()), 1) for item in bp['boxes']]
fliers = [item.get_ydata() for item in bp['fliers']]
lower_outliers = []
upper_outliers = []
for i in range(len(fliers)):
    lower_outliers_by_box = []
    upper_outliers_by_box = []
    for outlier in fliers[i]:
        if outlier < q1[i]:
            lower_outliers_by_box.append(round(outlier, 1))
        else:
            upper_outliers_by_box.append(round(outlier, 1))
    lower_outliers.append(lower_outliers_by_box)
    upper_outliers.append(upper_outliers_by_box)    
    
# New code
stats = [medians, means, minimums, maximums, q1, q3, lower_outliers, upper_outliers]
stats_names = ['Median', 'Mean', 'Minimum', 'Maximum', 'Q1', 'Q3', 'Lower outliers', 'Upper outliers']
categories = ['DATASET 1', 'DATASET 2']
for i in range(len(categories)):
    logger.info(f'\033[1m{categories[i]}\033[0m')
    for j in range(len(stats)):
        logger.info(f'{stats_names[j]}: {stats[j][i]}')
    logger.info('\n')

logger.info(f"CARGO SHIPS:\nMAX SOG: {total_max_speed}\tTOTAL AVG. SPEED: {total_average}")